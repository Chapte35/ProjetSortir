{# templates/justification_modal.html.twig #}
<div class="modal fade" id="justificationModal" tabindex="-1" aria-labelledby="justificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="justificationModalLabel">Annulation de la Sortie</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="justificationForm" method="POST">
                <input type="hidden" id="sortieId" name="sortieId">
                <div class="modal-body">
                    {{ form_start(form) }}
                    {{ form_row(form.justification) }}

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-dark" data-bs-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-danger" id="submitJustification">Valider</button>
                    {{ form_end(form) }}
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const justificationForm = document.getElementById('justificationForm');
        const justificationModal = document.getElementById('justificationModal');
        const sortieIdInput = document.getElementById('sortieId');

        // Récupérer l'ID de sortie lors de l'ouverture du modal
        justificationModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            const sortieId = button.getAttribute('data-sortie-id');
            sortieIdInput.value = sortieId;
            console.log("id : " + sortieId);


        // Soumettre le formulaire d'annulation
        justificationForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);

            console.log('Envoi de la requête avec ID:', sortieId);
            console.log('URL de la requête:', `/sortie/submit-justification/${sortieId}`);

            fetch(`/sortie/submit-justification/${sortieId}`, {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    console.log('Statut de la réponse:', response.status);

                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json();
                    } else {
                        return response.text().then(text => {
                            console.error('Réponse non JSON:', text);
                            throw new Error('La réponse du serveur n\'est pas au format JSON');
                        });
                    }
                })
                .then(data => {
                    console.log('Données reçues:', data);

                    if (data.success) {
                        // Fermer le modal
                        const modalInstance = bootstrap.Modal.getInstance(justificationModal);
                        modalInstance.hide();

                        // Afficher un message de succès
                        alert(data.message);

                        // Optionnel : recharger la page ou mettre à jour l'UI
                        location.reload();
                    } else {
                        // Gérer les erreurs de validation
                        alert('Erreur : ' + (data.errors || 'Validation échouée'));
                    }
                })
                .catch(error => {
                    console.error('Erreur complète:', error);
                });
            console.log('ID de sortie récupéré:', sortieId);
        });
        });
    });
</script>